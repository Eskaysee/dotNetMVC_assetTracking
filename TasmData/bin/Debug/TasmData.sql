/*
Deployment script for TasmData

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TasmData"
:setvar DefaultFilePrefix "TasmData"
:setvar DefaultDataPath "C:\Users\sihle\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\sihle\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[Device]...';


GO
CREATE TABLE [dbo].[Device] (
    [Id]         INT           NOT NULL,
    [Name]       VARCHAR (255) NOT NULL,
    [GroupId]    INT           NOT NULL,
    [FirmwareId] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[DeviceGroup]...';


GO
CREATE TABLE [dbo].[DeviceGroup] (
    [Id]            INT           NOT NULL,
    [Name]          VARCHAR (255) NOT NULL,
    [ParentGroupId] INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Firmware]...';


GO
CREATE TABLE [dbo].[Firmware] (
    [Id]          INT           NOT NULL,
    [Name]        VARCHAR (255) NOT NULL,
    [Version]     VARCHAR (50)  NOT NULL,
    [ReleaseDate] DATE          NOT NULL,
    [PreviousId]  INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device] WITH NOCHECK
    ADD FOREIGN KEY ([GroupId]) REFERENCES [dbo].[DeviceGroup] ([Id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Device]...';


GO
ALTER TABLE [dbo].[Device] WITH NOCHECK
    ADD FOREIGN KEY ([FirmwareId]) REFERENCES [dbo].[Firmware] ([Id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[DeviceGroup]...';


GO
ALTER TABLE [dbo].[DeviceGroup] WITH NOCHECK
    ADD FOREIGN KEY ([ParentGroupId]) REFERENCES [dbo].[DeviceGroup] ([Id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Firmware]...';


GO
ALTER TABLE [dbo].[Firmware] WITH NOCHECK
    ADD FOREIGN KEY ([PreviousId]) REFERENCES [dbo].[Firmware] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
-- Inserting data into DeviceGroup table
INSERT INTO DeviceGroup (Id, Name, ParentGroupId)
VALUES
    (1, 'SensorDevice', NULL),
    (2, 'TrackerDevice', NULL),
    (3, 'Indoor', 1),
    (4, 'Outdoor', 2),
    (5, 'Battery', 2),
    (6, 'Wired', 3);

-- Inserting data into Firmware table
INSERT INTO Firmware (Id, Name, Version, ReleaseDate, PreviousId)
VALUES
    (1, 'MonitorMyAsset', 'v1.0', '2000-01-01', NULL),
    (2, 'LocateMyAsset', 'v1.0', '2000-01-01', NULL),
    (3, 'MonitorMyAsset', 'v1.1', '2000-03-15', 1),
    (4, 'LocateMyAsset', 'v2.0', '2001-02-03', 2);

INSERT INTO Device (Id, Name, GroupId, FirmwareId)
VALUES
    (1,'Finder',4,2),
    (2,'Watcher',6,1),
    (3,'Locator',2,4);
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Device'), OBJECT_ID(N'dbo.DeviceGroup'), OBJECT_ID(N'dbo.Firmware'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
